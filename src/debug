/* Generated by re2c 2.0.3 on Sat Jan 23 22:25:40 2021 */

import * as util from 'util'

export const enum State {
  top = 10000,
  xp,
  tag,
  eof1_top,
  eof1_xp,
  eof1_tag,
}

export class Token {
  [util.inspect.custom](depth: any, opts: any) {
    return [this.kind, this.start, this.value]
  }

  constructor(
    public value: string,
    public kind: T,
    public start: number,
    public end: number,
    public line: number,
    public col: number) { }
}

export function lex(str: string): Token[] {
  // str = str + '\x00' // inserting a null char
  var start = 0
  var text_marker = 0

  var line = 1
  var col = 1
  var state = State.top

  var yyaccept = 0
  var cursor = 0
  var comment_count = 0
  var res: Token[] = []
  var _length = str.length - 1
  var YYMARKER = -1
  var _stored_pos = -1

  function check_text() {
    if (text_marker > start) {
      res.push(new Token(
        str.slice(start, text_marker),
        T.Text,
        start,
        text_marker,
        line,
        col,
      ))
      start = text_marker
    }
    // console.log('!!', start, text_marker, cursor, str.slice(0, cursor))
  }

  function emit_token(kind: T) {
    state = State.top

    check_text()
    res.push(new Token(
      str.slice(start, cursor),
      kind,
      start,
      cursor,
      line,
      col
    ))
    start = cursor
  }

  function skip() {
    // used to skip spaces inside expressions
    start = cursor
  }

  while (true) {
  switch (state)
  
    {
      var yych;
      unsigned int yyaccept = 0;
      if (state < 1) {
        goto case State.top;
      } else {
        goto case State.xp;
      }
/* *********************************** */
case State.top:
      yych = str[cursor] ?? '\x00';
      if (yych <= '@') {
        if (yych <= '"') {
          if (yych >= 0x01) goto case 2;
          if (cursor > _length) goto case eof1_top;
        } else {
          if (yych <= '#') goto case 4;
          if (yych >= '@') goto case 5;
        }
      } else {
        if (yych <= '\\') {
          if (yych >= '\\') goto case 7;
        } else {
          if (yych == '{') goto case 8;
        }
      }
case 2:
      ++cursor
case 3:
      { text_marker = cursor; continue }
case 4:
      ++cursor
      yych = str[cursor] ?? '\x00';
      if (yych <= 0x00) goto case 3;
      if (yych == '}') goto case 9;
      goto case 3;
case 5:
      ++cursor
      state = State.yycxp
      { emit_token(T.Exp); continue }
case 7:
      ++cursor
      yych = str[cursor] ?? '\x00';
      if (yych <= 0x00) goto case 3;
      if (yych == '@') goto case 11;
      goto case 3;
case 8:
      ++cursor
      yych = str[cursor] ?? '\x00';
      if (yych <= 0x00) goto case 3;
      if (yych == '#') goto case 13;
      goto case 3;
case 9:
      ++cursor
      { emit_token(T.CommentEnd); continue }
case 11:
      ++cursor
      { text_marker = cursor; continue }
case 13:
      ++cursor
      { emit_token(T.CommentStart); continue }
case eof1_top:
      { emit_token(T.ZEof); return res; }
/* *********************************** */
case State.xp:
      yych = str[cursor] ?? '\x00';
      switch (yych) {
      case '\n':
      case 's':  goto case 19;
      case '!':  goto case 22;
      case '%':
      case '/':  goto case 24;
      case '&':  goto case 26;
      case '(':  goto case 28;
      case ')':  goto case 30;
      case '*':  goto case 32;
      case '+':  goto case 33;
      case '-':  goto case 35;
      case '.':  goto case 36;
      case '<':  goto case 38;
      case '=':  goto case 40;
      case '>':  goto case 42;
      case '?':  goto case 43;
      case '[':  goto case 45;
      case ']':  goto case 47;
      case '^':  goto case 49;
      case 'a':  goto case 50;
      case 'd':  goto case 51;
      case 'f':  goto case 52;
      case 'i':  goto case 53;
      case 'n':  goto case 54;
      case 't':  goto case 55;
      case 'v':  goto case 56;
      case 'y':  goto case 57;
      case '|':  goto case 58;
      case '~':  goto case 60;
      default:
        if (cursor > _length) goto case eof1_xp;
        goto case 17;
      }
case 17:
      ++cursor
case 18:
      { continue }
case 19:
      ++cursor
      yych = str[cursor] ?? '\x00';
      if (yych <= '\n') {
        if (yych <= 0x00) goto case 21;
        if (yych >= '\n') goto case 19;
      } else {
        if (yych == 's') goto case 19;
      }
case 21:
      { skip(); continue }
case 22:
      ++cursor
      yych = str[cursor] ?? '\x00';
      if (yych <= 0x00) goto case 23;
      if (yych == '=') goto case 61;
case 23:
      { emit_token(T.Not); continue }
case 24:
      ++cursor
      yych = str[cursor] ?? '\x00';
      if (yych <= 0x00) goto case 25;
      if (yych == '=') goto case 63;
case 25:
      { emit_token(T.Mul); continue }
case 26:
      ++cursor
      yych = str[cursor] ?? '\x00';
      if (yych <= '&') {
        if (yych <= 0x00) goto case 27;
        if (yych >= '&') goto case 64;
      } else {
        if (yych == '=') goto case 63;
      }
case 27:
      { emit_token(T.BitAnd); continue }
case 28:
      ++cursor
      { emit_token(T.LParen); continue }
case 30:
      ++cursor
      { emit_token(T.RParen); continue }
case 32:
      ++cursor
      yych = str[cursor] ?? '\x00';
      if (yych <= '*') {
        if (yych <= 0x00) goto case 25;
        if (yych <= ')') goto case 25;
        goto case 66;
      } else {
        if (yych == '=') goto case 63;
        goto case 25;
      }
case 33:
      ++cursor
      yych = str[cursor] ?? '\x00';
      if (yych <= '+') {
        if (yych <= 0x00) goto case 34;
        if (yych >= '+') goto case 68;
      } else {
        if (yych == '=') goto case 63;
      }
case 34:
      { emit_token(T.Add); continue }
case 35:
      ++cursor
      yych = str[cursor] ?? '\x00';
      if (yych <= '-') {
        if (yych <= 0x00) goto case 34;
        if (yych <= ',') goto case 34;
        goto case 68;
      } else {
        if (yych == '=') goto case 63;
        goto case 34;
      }
case 36:
      ++cursor
      yych = str[cursor] ?? '\x00';
      if (yych <= 0x00) goto case 37;
      if (yych == '?') goto case 70;
case 37:
      { emit_token(T.Dot); continue }
case 38:
      ++cursor
      yych = str[cursor] ?? '\x00';
      if (yych <= 0x00) goto case 39;
      if (yych <= ';') goto case 39;
      if (yych <= '<') goto case 71;
      if (yych <= '=') goto case 73;
case 39:
      { emit_token(T.Comparison); continue }
case 40:
      ++cursor
      yych = str[cursor] ?? '\x00';
      if (yych <= 0x00) goto case 41;
      if (yych <= '<') goto case 41;
      if (yych <= '=') goto case 61;
      if (yych <= '>') goto case 74;
case 41:
      { emit_token(T.Assign); continue }
case 42:
      ++cursor
      yych = str[cursor] ?? '\x00';
      if (yych <= 0x00) goto case 39;
      if (yych <= '<') goto case 39;
      if (yych <= '=') goto case 73;
      if (yych <= '>') goto case 76;
      goto case 39;
case 43:
      ++cursor
      yych = str[cursor] ?? '\x00';
      if (yych <= 0x00) goto case 44;
      if (yych == '?') goto case 77;
case 44:
      { emit_token(T.Question); continue }
case 45:
      ++cursor
      { emit_token(T.LBracket); continue }
case 47:
      ++cursor
      { emit_token(T.RBracket); continue }
case 49:
      ++cursor
      yych = str[cursor] ?? '\x00';
      if (yych <= 0x00) goto case 18;
      if (yych == '=') goto case 63;
      goto case 18;
case 50:
      yyaccept = 0;
      ++cursor
      _stored_pos = cursor
      yych = str[cursor] ?? '\x00';
      if (yych <= 0x00) goto case 18;
      if (yych == 'w') goto case 79;
      goto case 18;
case 51:
      yyaccept = 0;
      ++cursor
      _stored_pos = cursor
      yych = str[cursor] ?? '\x00';
      if (yych <= 0x00) goto case 18;
      if (yych == 'e') goto case 81;
      goto case 18;
case 52:
      ++cursor
      yych = str[cursor] ?? '\x00';
      if (yych <= 0x00) goto case 18;
      if (yych == 'n') goto case 82;
      goto case 18;
case 53:
      ++cursor
      yych = str[cursor] ?? '\x00';
      if (yych <= 0x00) goto case 18;
      if (yych == 'n') goto case 84;
      goto case 18;
case 54:
      yyaccept = 0;
      ++cursor
      _stored_pos = cursor
      yych = str[cursor] ?? '\x00';
      if (yych <= 0x00) goto case 18;
      if (yych == 'e') goto case 85;
      goto case 18;
case 55:
      yyaccept = 0;
      ++cursor
      _stored_pos = cursor
      yych = str[cursor] ?? '\x00';
      if (yych <= 0x00) goto case 18;
      if (yych == 'y') goto case 86;
      goto case 18;
case 56:
      yyaccept = 0;
      ++cursor
      _stored_pos = cursor
      yych = str[cursor] ?? '\x00';
      if (yych <= 0x00) goto case 18;
      if (yych == 'o') goto case 87;
      goto case 18;
case 57:
      yyaccept = 0;
      ++cursor
      _stored_pos = cursor
      yych = str[cursor] ?? '\x00';
      if (yych <= 0x00) goto case 18;
      if (yych == 'i') goto case 88;
      goto case 18;
case 58:
      ++cursor
      yych = str[cursor] ?? '\x00';
      if (yych <= '=') {
        if (yych <= 0x00) goto case 59;
        if (yych >= '=') goto case 63;
      } else {
        if (yych == '|') goto case 89;
      }
case 59:
      { emit_token(T.BitOr); continue }
case 60:
      ++cursor
      goto case 23;
case 61:
      ++cursor
      yych = str[cursor] ?? '\x00';
      if (yych <= 0x00) goto case 62;
      if (yych == '=') goto case 91;
case 62:
      { emit_token(T.Equal); continue }
case 63:
      ++cursor
      goto case 41;
case 64:
      ++cursor
      yych = str[cursor] ?? '\x00';
      if (yych <= 0x00) goto case 65;
      if (yych == '=') goto case 63;
case 65:
      { emit_token(T.And); continue }
case 66:
      ++cursor
      yych = str[cursor] ?? '\x00';
      if (yych <= 0x00) goto case 67;
      if (yych == '=') goto case 63;
case 67:
      { emit_token(T.Power); continue }
case 68:
      ++cursor
      { emit_token(T.Increments); continue }
case 70:
      ++cursor
      goto case 37;
case 71:
      ++cursor
      yych = str[cursor] ?? '\x00';
      if (yych <= 0x00) goto case 72;
      if (yych == '=') goto case 63;
case 72:
      { emit_token(T.BitShift); continue }
case 73:
      ++cursor
      goto case 39;
case 74:
      ++cursor
      { emit_token(T.ArrowFunction); continue }
case 76:
      ++cursor
      yych = str[cursor] ?? '\x00';
      if (yych <= 0x00) goto case 72;
      if (yych <= '<') goto case 72;
      if (yych <= '=') goto case 63;
      if (yych <= '>') goto case 71;
      goto case 72;
case 77:
      ++cursor
      yych = str[cursor] ?? '\x00';
      if (yych <= 0x00) goto case 78;
      if (yych == '=') goto case 63;
case 78:
      { emit_token(T.Nullish); continue }
case 79:
      ++cursor
      yych = str[cursor] ?? '\x00';
      if (yych <= 0x00) goto case 80;
      if (yych == 'a') goto case 92;
case 80:
      cursor = _stored_pos
      if (yyaccept == 0) {
        goto case 18;
      } else {
        goto case 39;
      }
case 81:
      ++cursor
      yych = str[cursor] ?? '\x00';
      if (yych <= 0x00) goto case 80;
      if (yych == 'l') goto case 93;
      goto case 80;
case 82:
      ++cursor
      { emit_token(T.Fn); continue }
case 84:
      yyaccept = 1;
      ++cursor
      _stored_pos = cursor
      yych = str[cursor] ?? '\x00';
      if (yych <= 0x00) goto case 39;
      if (yych == 's') goto case 94;
      goto case 39;
case 85:
      ++cursor
      yych = str[cursor] ?? '\x00';
      if (yych <= 0x00) goto case 80;
      if (yych == 'w') goto case 95;
      goto case 80;
case 86:
      ++cursor
      yych = str[cursor] ?? '\x00';
      if (yych <= 0x00) goto case 80;
      if (yych == 'p') goto case 97;
      goto case 80;
case 87:
      ++cursor
      yych = str[cursor] ?? '\x00';
      if (yych <= 0x00) goto case 80;
      if (yych == 'i') goto case 98;
      goto case 80;
case 88:
      ++cursor
      yych = str[cursor] ?? '\x00';
      if (yych <= 0x00) goto case 80;
      if (yych == 'e') goto case 99;
      goto case 80;
case 89:
      ++cursor
      yych = str[cursor] ?? '\x00';
      if (yych <= 0x00) goto case 90;
      if (yych == '=') goto case 63;
case 90:
      { emit_token(T.Or); continue }
case 91:
      ++cursor
      goto case 62;
case 92:
      ++cursor
      yych = str[cursor] ?? '\x00';
      if (yych <= 0x00) goto case 80;
      if (yych == 'i') goto case 100;
      goto case 80;
case 93:
      ++cursor
      yych = str[cursor] ?? '\x00';
      if (yych <= 0x00) goto case 80;
      if (yych == 'e') goto case 101;
      goto case 80;
case 94:
      ++cursor
      yych = str[cursor] ?? '\x00';
      if (yych <= 0x00) goto case 80;
      if (yych == 't') goto case 102;
      goto case 80;
case 95:
      ++cursor
      { emit_token(T.New); continue }
case 97:
      ++cursor
      yych = str[cursor] ?? '\x00';
      if (yych <= 0x00) goto case 80;
      if (yych == 'e') goto case 103;
      goto case 80;
case 98:
      ++cursor
      yych = str[cursor] ?? '\x00';
      if (yych <= 0x00) goto case 80;
      if (yych == 'd') goto case 60;
      goto case 80;
case 99:
      ++cursor
      yych = str[cursor] ?? '\x00';
      if (yych <= 0x00) goto case 80;
      if (yych == 'l') goto case 104;
      goto case 80;
case 100:
      ++cursor
      yych = str[cursor] ?? '\x00';
      if (yych <= 0x00) goto case 80;
      if (yych == 't') goto case 60;
      goto case 80;
case 101:
      ++cursor
      yych = str[cursor] ?? '\x00';
      if (yych <= 0x00) goto case 80;
      if (yych == 't') goto case 105;
      goto case 80;
case 102:
      ++cursor
      yych = str[cursor] ?? '\x00';
      if (yych <= 0x00) goto case 80;
      if (yych == 'a') goto case 106;
      goto case 80;
case 103:
      ++cursor
      yych = str[cursor] ?? '\x00';
      if (yych <= 0x00) goto case 80;
      if (yych == 'o') goto case 107;
      goto case 80;
case 104:
      ++cursor
      yych = str[cursor] ?? '\x00';
      if (yych <= 0x00) goto case 80;
      if (yych == 'd') goto case 108;
      goto case 80;
case 105:
      ++cursor
      yych = str[cursor] ?? '\x00';
      if (yych <= 0x00) goto case 80;
      if (yych == 'e') goto case 60;
      goto case 80;
case 106:
      ++cursor
      yych = str[cursor] ?? '\x00';
      if (yych <= 0x00) goto case 80;
      if (yych == 'n') goto case 110;
      goto case 80;
case 107:
      ++cursor
      yych = str[cursor] ?? '\x00';
      if (yych <= 0x00) goto case 80;
      if (yych == 'f') goto case 60;
      goto case 80;
case 108:
      ++cursor
      yych = str[cursor] ?? '\x00';
      if (yych <= 0x00) goto case 109;
      if (yych == '*') goto case 111;
case 109:
      { emit_token(T.Yield); continue }
case 110:
      ++cursor
      yych = str[cursor] ?? '\x00';
      if (yych <= 0x00) goto case 80;
      if (yych == 'c') goto case 112;
      goto case 80;
case 111:
      ++cursor
      goto case 109;
case 112:
      ++cursor
      yych = str[cursor] ?? '\x00';
      if (yych <= 0x00) goto case 80;
      if (yych != 'e') goto case 80;
      ++cursor
      yych = str[cursor] ?? '\x00';
      if (yych <= 0x00) goto case 80;
      if (yych != 'o') goto case 80;
      ++cursor
      yych = str[cursor] ?? '\x00';
      if (yych <= 0x00) goto case 80;
      if (yych == 'f') goto case 73;
      goto case 80;
case eof1_xp:
      { emit_token(T.ZEof); return res; }
    }


  }
}

