
import { Token, T, Ctx, Position } from './token'

export function lex(str: string, ctx: Ctx = Ctx.top, pos: Position = new Position(0, 0, 0)): Token {
  // str = str + '\x00' // inserting a null char
  var cursor = pos.offset
  var start = cursor
  var text_marker = 0

  var line = pos.line
  var col = pos.character

  var state = 1 // starting state of re2c
  var yych: number = -1
  var yyaccept = 0
  var _length = str.length
  var _stored_pos = -1

  switch (ctx) {
    case Ctx.stringtop:
    case Ctx.top: {
      return _parse_toplevel()
    }
    case Ctx.expression: {
      return _parse_expression()
    }
    default:
      throw new Error('!')
  }

  function count(st: number, ed: number) {
    while (st < ed) {
      if (str.charCodeAt(st) === '\n') {
        line++
        col = 0
      } else {
        col++
      }
      st++
    }
  }

  function emit_token(kind: T): Token {
    var pos_start = new Position(line, col, start)
    if (text_marker < start) text_marker = start
    count(start, text_marker)
    var pos_value = new Position(line, col, text_marker)
    count(text_marker, cursor)
    var pos_end = new Position(line, col, cursor)

    return new Token(
      str,
      kind,
      pos_start,
      pos_value,
      pos_end,
      ctx,
    )
  }

  function get_yychar() {
    return cursor <= _length ? str.charCodeAt(cursor) : 0
  }

  /*!rules:re2c
  // Global re2c definitions
  re2c:define:YYCTYPE  = "var";
  re2c:define:YYCURSOR = cursor;
  re2c:define:YYPEEK = "get_yychar()";
  re2c:define:YYSKIP = "++cursor";
  re2c:define:YYRESTORE = "cursor = _stored_pos";
  re2c:define:YYBACKUP = "_stored_pos = cursor";
  re2c:define:YYLESSTHAN = "cursor >= _length";
  re2c:tags:expression = "@@";
  re2c:define:YYSTAGP = "@@{tag} = cursor";
  re2c:eof = 0;
  re2c:flags:input = custom;
  re2c:api:style = free-form;

  re2c:yyfill:enable = 0;
  re2c:labelprefix = "case ";
  re2c:indent:top = 2;
  re2c:indent:string = "  ";
  */


  function _parse_toplevel() {
    let exp_leftovers: number = -1
    let yyt1: number = -1
    do {
    switch (state)
    /*!use:re2c

      ExpStart = "@<>" | "@<" | "@>" | "@" ;

      "``" { if (ctx === Ctx.stringtop) { return emit_token(T.EscapeExp) }
        text_marker = cursor; state = 1; continue }
      "`" { if (ctx === Ctx.stringtop) { return emit_token(T.Backtick) }
        text_marker = cursor; state = 1; continue }
      "@@" { return emit_token(T.EscapeExp) } // escape the expression starter

      ExpStart "init" { return emit_token(T.Init) }
      ExpStart "repeat" { return emit_token(T.Repeat) }
      ExpStart "raw" { return emit_token(T.Raw) }
      ExpStart "block" { return emit_token(T.Block) }
      ExpStart "lang" { return emit_token(T.Lang) }
      ExpStart "if" { return emit_token(T.If) }
      ExpStart "elif" { return emit_token(T.Elif) }
      ExpStart "else" { return emit_token(T.Else) }
      ExpStart "while" { return emit_token(T.While) }
      ExpStart "for" { return emit_token(T.For) }

      ExpStart "endlang" { return emit_token(T.EndLang) }
      ExpStart "end" { return emit_token(T.End) }

      ExpStart @exp_leftovers [a-z]* {
        cursor = exp_leftovers;
        return emit_token(T.ExpStart)
      }

      * { text_marker = cursor; state = 1; continue }
      $ { return emit_token(T.ZEof) }
    */
    } while (true)
  }

  function _parse_expression() {

    do {
    switch (state)
    /*!use:re2c

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////
        // A bunch of definitions stolen from https://opensource.apple.com/source/WebCore/WebCore-1298/inspector/front-end/SourceJavaScriptTokenizer.re2js?raw
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////

        LineComment = "//" [^\r\n]*;
        CommentContent = ([^*\r\n] | ("*"+[^/*]))*;
        Comment = "/*" CommentContent "*"+ "/";
        CommentStart = "/*" CommentContent [\r\n];
        CommentEnd = CommentContent "*"+ "/";

        Digit = [0-9];
        NonZeroDigit = [1-9];
        OctalDigit = [0-7];
        HexDigit = [0-9a-fA-F];
        SignedInteger = ("+"|"-")? Digit+;
        ExponentPart = ("e" | "E") SignedInteger;
        DecimalIntegerLiteral = "0" | NonZeroDigit Digit*;
        DecimalLiteral = DecimalIntegerLiteral "." Digit* ExponentPart? | "." Digit+ ExponentPart? | DecimalIntegerLiteral ExponentPart?;
        HexIntegerLiteral = "0" ("x"|"X") HexDigit+;
        OctalIntegerLiteral = "0" OctalDigit+;
        NumericLiteral = DecimalLiteral | HexIntegerLiteral | OctalIntegerLiteral;

        // Punctuation = [\!\%\&\(\*\+\,\-\.\:\;\<\=\>\?\[\]\^\{\|\}\~] | "!=" | "!==" | "%=" | "&&" | "&=" | "*=" | "++" | "+=" | "--" | "-=" | "<<" | "<<="  | "<=" | "==" | "===" | ">=" | ">>" | ">>=" | ">>>" | ">>>=" | "^=" | "|=" | "||";
        // Division = "/" | "/=";

        Letter = [a-zA-Z\x80-\xFF];
        UnicodeEscapeSequence = "\\u" HexDigit HexDigit HexDigit HexDigit;

        IdentifierStart = Letter | "_" | "$" | UnicodeEscapeSequence;
        IdentifierPart = IdentifierStart | Digit;
        Identifier = IdentifierStart IdentifierPart *;

        DoubleStringContent = ([^\r\n\"\\] | UnicodeEscapeSequence | "\\" ['"\\bfnrtv])*;
        SingleStringContent = ([^\r\n\'\\] | UnicodeEscapeSequence | "\\" ['"\\bfnrtv])*;
        StringLiteral = "\"" DoubleStringContent "\"" | "'" SingleStringContent "'";
        DoubleStringStart = "\"" DoubleStringContent "\\" [\r\n];
        DoubleStringEnd = DoubleStringContent "\"";
        SingleStringStart = "'" SingleStringContent "\\" [\r\n];
        SingleStringEnd = SingleStringContent "'";

        IsoTimezone = ("Z" | [+-] Digit{2} (":" Digit{2})? ) ;
        IsoTimeFormat = "T" Digit{2} (":" Digit{2} (":" Digit{2})?)?;
        IsoDateLiteral = Digit{4} "-" Digit{2} "-" Digit{2} IsoTimeFormat? IsoTimezone?;

        BackslashSequence = "\\" [^\r\n];
        RegexSet = "[" ([^\r\n*\\/] | BackslashSequence)* "]";
        RegexFirstChar = [^\r\n*\\/\[\]] | BackslashSequence | RegexSet;
        RegexChar = [^\r\n\\/\[\]] | BackslashSequence | RegexSet;
        RegexContent = RegexChar*;
        Regex = "/" RegexFirstChar RegexContent "/" [igm]*;

        /////////////////////////////////////////////////////////////////////////////////////
        /////////////////////////////////////////////////////////////////////////////////////

        // In top level, anything not in a rule gets output as text
        Regex            { return emit_token(T.Regexp) }
        IsoDateLiteral   { return emit_token(T.Date) }
        StringLiteral    { return emit_token(T.String) }
        ([\n \t])+       { text_marker = cursor; state = 1; continue }
        NumericLiteral   { return emit_token(T.Number) }

        ","              { return emit_token(T.Comma) }
        "("              { return emit_token(T.LParen) }
        ")"              { return emit_token(T.RParen) }
        "["              { return emit_token(T.LBrace) }
        "]"              { return emit_token(T.RBrace) }
        "{"              { return emit_token(T.LBracket) }
        "}"              { return emit_token(T.RBracket) }
        ":"              { return emit_token(T.Colon) }
        ";"              { return emit_token(T.Semicolon) }

        "..."            { return emit_token(T.Ellipsis) }
        "::"             { return emit_token(T.Filter) }
        "=>"             { return emit_token(T.ArrowFunction) }

        "." | "?."       { return emit_token(T.Dot) }
        "new"            { return emit_token(T.New) }
        "!" | "~" | "typeof" | "void" | "delete" | "await" { return emit_token(T.Not) }
        "++" | "--"      { return emit_token(T.Increments) }
        "**"             { return emit_token(T.Power) }
        "*" | "/" | "%"  { return emit_token(T.Mul) }
        "+" | "-"        { return emit_token(T.Add) }
        "<<" | ">>" | ">>>" { return emit_token(T.BitShift) }
        "<=" | "<" | ">=" | ">" | "in" | "instanceof" { return emit_token(T.Comparison) }
        "!==" | "!=" | "==" | "===" { return emit_token(T.Equal) }
        "&"              { return emit_token(T.BitAnd) }
        "^"              { return emit_token(T.BitXor) }
        "|"              { return emit_token(T.BitOr) }
        "&&"             { return emit_token(T.And) }
        "||"             { return emit_token(T.Or) }
        "??"             { return emit_token(T.Nullish) }
        "?"              { return emit_token(T.Question) }
        "=" | "+=" | "-=" | "**=" | "*=" | "/=" | "%=" | "<<=" | ">>=" | ">>>=" | "&=" | "^=" | "|=" | "&&=" | "||=" | "??="
              { return emit_token(T.Assign) }
        "yield" "*"?     { return emit_token(T.Yield) }

        "#" [^\n]*        { return emit_token(T.Comment) }
        "`"              { return emit_token(T.Backtick) }

        "if"             { return emit_token(T.If) }
        "for"            { return emit_token(T.For) }
        "while"          { return emit_token(T.While) }
        "switch"         { return emit_token(T.Switch) }
        "case"           { return emit_token(T.Case) }
        "try"            { return emit_token(T.Try) }
        "catch"          { return emit_token(T.Catch) }
        "finally"        { return emit_token(T.Finally) }
        "do"             { return emit_token(T.Do) }
        "else"           { return emit_token(T.Else) }
        "let"            { return emit_token(T.Let) }
        "elif"           { return emit_token(T.Elif) }
        "fn"             { return emit_token(T.Fn) }
        "true" | "false" | "null" | "undefined" { return emit_token(T.Literal) }
        Identifier       { return emit_token(T.Ident) }

        * { return emit_token(T.Unexpected) }
        // maybe we should go full parsing mode to allow for | expressions ?

        $ { return emit_token(T.ZEof); }
    */

    } while (true)
  }
}

